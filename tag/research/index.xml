<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>research | JH&#39;s Blog</title>
    <link>https://shinjaehyeok.github.io/tag/research/</link>
      <atom:link href="https://shinjaehyeok.github.io/tag/research/index.xml" rel="self" type="application/rss+xml" />
    <description>research</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright 2021 Jaehyeok Shin. All rights reserved.</copyright><lastBuildDate>Sun, 27 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://shinjaehyeok.github.io/images/icon_huc50b28ae5ce84fcc767e7691e9c0c0ae_20181_512x512_fill_lanczos_center_3.png</url>
      <title>research</title>
      <link>https://shinjaehyeok.github.io/tag/research/</link>
    </image>
    
    <item>
      <title>SGLRT package </title>
      <link>https://shinjaehyeok.github.io/post/sglrt-package/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://shinjaehyeok.github.io/post/sglrt-package/</guid>
      <description>


&lt;div id=&#34;sglrt&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;SGLRT&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;SGLRT&lt;/code&gt; is a R package implementation of Sequential Generalized Likelihood Ratio (GLR)-like Tests and confidence sequences in&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nonparametric iterated-logarithm extensions to Lorden’s treatment of the sequential GLRT&lt;/strong&gt;&lt;br /&gt;
J. Shin, A. Ramdas, A. Rinaldo &lt;a href=&#34;https://arxiv.org/abs/2010.08082&#34;&gt;arXiv&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install the &lt;code&gt;SGLRT&lt;/code&gt; package from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;shinjaehyeok/SGLRT_public&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;!---You can install the released version of SGLRT from [CRAN](https://CRAN.R-project.org) with:

``` r
install.packages(&#34;SGLRT&#34;)
```
--&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-reproduce-all-plots-and-simulation-results-in-srr20.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How to reproduce all plots and simulation results in SRR’20.&lt;/h2&gt;
&lt;p&gt;To reproduce plots, you need to install &lt;code&gt;latex2exp&lt;/code&gt; package which parses and converts LaTeX math formulas to R’s plotmath expressions. It is is not installed, you can run the following command to install it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;latex2exp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;compare-boundaries-for-sequential-glr-tests.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. Compare boundaries for sequential GLR tests.&lt;/h3&gt;
&lt;div id=&#34;fig.-3-in-section-iii-a&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;(Fig. 3 in Section III-A)&lt;/h5&gt;
&lt;p&gt;For a given exponential family distribution, let &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{GLR}_n (&amp;gt; \mu_1, \leq\mu_0)\)&lt;/span&gt; be the GLR statistic based &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; i.i.d. observations for the one-sided testing problem:
&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \mu \leq \mu_0~~\text{vs}~~H_1 : \mu &amp;gt;\mu_1,
\]&lt;/span&gt;
for some &lt;span class=&#34;math inline&#34;&gt;\(\mu_0 &amp;lt; \mu_0\)&lt;/span&gt; in the space of mean parameters. &lt;a name=&#34;myfootnote1_return&#34;&gt;For any constant &lt;span class=&#34;math inline&#34;&gt;\(g &amp;gt; 0\)&lt;/span&gt;, Lorden 1973 proved the following upper bound on the boundary-crossing probability:&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;#myfootnote1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;span class=&#34;math display&#34;&gt;\[
\sup_{\mu \leq \mu_0}\mathbb{P}_{\mu} \left(n \geq 1:   \log\mathrm{GLR}_n(&amp;gt;\mu_1,\leq\mu_0) \geq g\right)
\leq \begin{cases} e^{-g} &amp;amp;\mbox{if } \mathrm{KL}(\mu_1,\mu_0) \geq g \\
\left(1 + \frac{g}{\mathrm{KL}(\mu_1,\mu_0)} \right)e^{-g} &amp;amp; \mbox{otherwise }.
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, in our paper, we proved the following inequality holds:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sup_{\mu \leq \mu_0}\mathbb{P}_{\mu} \left(\exists n \geq 1:   \log\mathrm{GLR}_n(&amp;gt;\mu_1,\leq\mu_0) \geq g\right) 
\leq \begin{cases} e^{-g} &amp;amp;\mbox{if } \mathrm{KL}(\mu_1,\mu_0) \geq g \\
\inf_{\eta &amp;gt;1} \left\lceil \log_\eta \left(\frac{g}{\mathrm{KL}(\mu_1,\mu_0)}\right)\right\rceil e^{-g / \eta} &amp;amp; \mbox{otherwise }. 
\end{cases}
\]&lt;/span&gt;
(In the paper, a nonparametric generalization of the above inequality was presented.)&lt;/p&gt;
&lt;p&gt;Now, for any &lt;span class=&#34;math inline&#34;&gt;\(\alpha \in (0,1)\)&lt;/span&gt;, let &lt;span class=&#34;math inline&#34;&gt;\(g_\alpha^L(\mu_1,\mu_0)\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(g_\alpha(\mu_1,\mu_0)\)&lt;/span&gt; be smallest boundary values which make RHS of two above inequalities equal to &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, respectively. The following Rcode reproduces the Fig. 3 in Section III-A in which we compared &lt;span class=&#34;math inline&#34;&gt;\(g_\alpha^L(\mu_1,\mu_0)\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(g_\alpha(\mu_1,\mu_0)\)&lt;/span&gt; for normal distributions with &lt;span class=&#34;math inline&#34;&gt;\(\sigma = 1\)&lt;/span&gt;. (In this case, &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{KL}(\mu_1 ,\mu_0) = (\mu_1 - \mu_0)^2 / 2\)&lt;/span&gt;.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(latex2exp)
library(SGLRT)


alpha &amp;lt;- 10^seq(-1,-10)
theta_vec &amp;lt;- c(1,0.5, 10^seq(-1,-10)) 
theta_vec &amp;lt;- 2^seq(0,-30)

d_vec &amp;lt;- theta_vec^2 / 2

for (i in seq_along(alpha[1:3])){
  f_lorden &amp;lt;- function(d) const_boundary_lorden(alpha[i], d)
  lorden &amp;lt;- sapply(d_vec, f_lorden)
  f_ours &amp;lt;- function(d) const_boundary(alpha[i], d)
  ours  &amp;lt;- sapply(d_vec, f_ours)
  if (i == 1){
    plot(1/theta_vec, unlist(lorden[&amp;quot;g&amp;quot;,]), type = &amp;quot;l&amp;quot;, 
         log =&amp;quot;x&amp;quot;,
         ylab = &amp;quot;Boundary Value&amp;quot;,
         xlab = TeX(&amp;quot;$|\\mu_1 - \\mu_0|^{-1}$ (log scale)&amp;quot;))
    points(1/theta_vec, unlist(ours[&amp;quot;g&amp;quot;,]), type = &amp;quot;l&amp;quot;, col = 2)
  } else {
    points(1/theta_vec, unlist(lorden[&amp;quot;g&amp;quot;,]), type = &amp;quot;l&amp;quot;, col = 1,
           lty = i)
    points(1/theta_vec, unlist(ours[&amp;quot;g&amp;quot;,]), type = &amp;quot;l&amp;quot;, col = 2,
           lty = i)
  }
}
legend(&amp;quot;topleft&amp;quot;, TeX(c(paste0(&amp;quot;Lorden&amp;#39;s ($\\alpha = &amp;quot;, alpha[1:3],&amp;quot;$)&amp;quot;), paste0(&amp;quot;Ours ($\\alpha = &amp;quot;, alpha[1:3],&amp;quot;$)&amp;quot;))), col = c(rep(1,3), rep(2,3)), lty = rep(1:3,2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://shinjaehyeok.github.io/post/2020-09-27-sglrt-package.en_files/figure-html/Fig.3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ratio-of-cis-width-to-clt&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. Ratio of CI’s width to CLT&lt;/h3&gt;
&lt;div id=&#34;fig.-5-in-section-iv-c&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;(Fig. 5 in Section IV-C)&lt;/h5&gt;
&lt;p&gt;For each &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, let &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{CI}_n(\alpha)\)&lt;/span&gt; be a random set based on first &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; observations &lt;span class=&#34;math inline&#34;&gt;\(X_1, \dots, X_n\)&lt;/span&gt; from a distribution with mean &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt;. If the sequence of random sets &lt;span class=&#34;math inline&#34;&gt;\(\{\mathrm{CI}_n(\alpha)\}_{n \in \mathbb{N}}\)&lt;/span&gt; satisfies the following inequality:
&lt;span class=&#34;math display&#34;&gt;\[
\mathbb{P}_\mu \left( \mu \in \mathrm{CI}_n(\alpha), \forall n \in \mathbb{N}\right) \geq 1-\alpha,~~\forall \mu \in (0,1),
\]&lt;/span&gt;
it is called a &lt;em&gt;confidence sequence&lt;/em&gt; with confidence level &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; (&lt;a name=&#34;myfootnote2_return&#34;&gt;&lt;/a&gt;e.g, see &lt;a href=&#34;https://arxiv.org/abs/1810.08240&#34;&gt;Howard et al., 2018&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;#myfootnote2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and references therein for a comprehensive summary of related literature.)&lt;/p&gt;
&lt;p&gt;Based on the upper bound on the boundary crossing probability above, in our paper, we presented two novel confidence sequences called &lt;em&gt;GLR-like&lt;/em&gt; and &lt;em&gt;discrete mixture&lt;/em&gt; based confidence sequences. For sub-Gaussian distributions with parameter &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;, The GLR-like confidence sequence is given by
&lt;span class=&#34;math display&#34;&gt;\[
    \mathrm{CI}_n^{\mathrm{G}} := \begin{cases}  \left(\bar{X}_n - \sigma\sqrt{\frac{g_\alpha}{n_{\min}}}\left[  \sqrt{2}  + \frac{1}{\sqrt{2}}\left(\frac{n_{\min}}{n}-1\right)\right], \infty\right) &amp;amp;\mbox{if } n \in [n_0,n_{\min}) \\
 \left( \bar{X}_n - \sigma\sqrt{\frac{2g_\alpha}{n}}, \infty\right) &amp;amp;\mbox{if }  n \in [n_{\min}, n_{\max}] \\
 \left(\bar{X}_n - \sigma\sqrt{\frac{g_\alpha}{n_{\max}}}\left[ \sqrt{2}  + \frac{1}{\sqrt{2}}\left(\frac{n_{\max}}{n}-1\right)\right], \infty\right) &amp;amp;\mbox{if } n \in (n_{\max}, \infty)
  \end{cases},
\]&lt;/span&gt;
for any given level &lt;span class=&#34;math inline&#34;&gt;\(\alpha \in (0, 1)\)&lt;/span&gt; and target time interval &lt;span class=&#34;math inline&#34;&gt;\([n_{\min}, n_{\max}]\)&lt;/span&gt; on which the confidence sequence is time-uniformly close to the Chrenoff bound. Unlike the GLR-like one, the discrete mixture based confidence sequence &lt;span class=&#34;math inline&#34;&gt;\(\{\mathrm{CI}_n^{\mathrm{DM}}\}\)&lt;/span&gt; does not have an explicit form and see the paper for the detailed explanation how to compute &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{CI}_n^{\mathrm{DM}}\)&lt;/span&gt; for given sample mean &lt;span class=&#34;math inline&#34;&gt;\(\bar{X}_n\)&lt;/span&gt; and confidence level &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;. By the construction, we have &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{CI}_n^{\mathrm{G}} \subset \mathrm{CI}_n^{\mathrm{DM}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In Section IV-C of the paper, we compare these bounds with the stitching and normal mixture bounds in &lt;a href=&#34;https://arxiv.org/abs/1810.08240&#34;&gt;Howard et al., 2018&lt;/a&gt; where each confidence intervals for stitching &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{CI}_{n}^{\mathrm{ST}}\)&lt;/span&gt; and normal mixture method &lt;span class=&#34;math inline&#34;&gt;\(\mathrm{CI}_n^{\mathrm{NM}}\)&lt;/span&gt; is given by
&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
    \mathrm{CI}_{n}^{\mathrm{ST}} &amp;amp;:= \left(\bar{X}_n-  \frac{1.7}{\sqrt{n}}\sqrt{\log\log(2n) + 0.72 \log\left(\frac{5.2}{\alpha}\right)}, \infty \right) \\
    \mathrm{CI}_{n}^{\mathrm{NM}} &amp;amp;:= \left(\bar{X}_n-  \sqrt{2 \left(1 + \frac{\rho}{n}\right) \log\left(\frac{1}{2\alpha} \sqrt{\frac{n + \rho}{\rho} + 1}\right)}, \infty \right),
\end{aligned}
\]&lt;/span&gt;
where we set &lt;span class=&#34;math inline&#34;&gt;\(\rho = 1260\)&lt;/span&gt; by following the setting in Figure 9 of &lt;a href=&#34;https://arxiv.org/abs/1810.08240&#34;&gt;Howard et al., 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following Rcode reproduces the Fig. 5 in Section IV-C in which we compared ratios of widths of confidence intervals above to the pointwise and asymptotically valid normal confidence intervals based on the central limit theorem.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(SGLRT)

# Chernoff
chornoff &amp;lt;- function(v, alpha = 0.025){
  sqrt(2  * log(1/alpha) / v)
}

# Normal mixture function
normal_mix &amp;lt;- function(v, alpha = 0.025, rho = 1260){
  sqrt(2 * (1 + rho / v) * log(1/(2*alpha) * sqrt((v + rho)/rho) + 1)) 
}

#Stitching
stitch &amp;lt;- function(v, alpha = 0.025){
  1.7 * sqrt((log(log(2) + log(v)) + 0.72 * log(5.2/alpha)) / v) 
}

# CLT
CLT &amp;lt;- function(v, alpha = 0.025){
  qnorm(1-alpha) / sqrt(v)
}

# Functions to construct our bounds
# First one has target interval [1, nmax]
# Second one has target interval [nmax / 20, nmax * 4]

alpha &amp;lt;- 0.025
nmax &amp;lt;- 1e+5

nmax1 &amp;lt;- nmax
nmin1 = 1

nmax2 &amp;lt;- nmax1 * 4
nmin2 &amp;lt;- nmax1 / 20


ours1 &amp;lt;- SGLR_CI_additive(alpha, nmax1, nmin1)
ours2 &amp;lt;- SGLR_CI_additive(alpha, nmax2, nmin2)


# Compute the width of CIs on exponentially-spaced grid.
M &amp;lt;- log(nmax, base = 10)
v &amp;lt;- 10^(seq(0,M + 0.2, length.out = 100))


# Compute existing bounds
chornoff_vec &amp;lt;- sapply(v, chornoff)
CLT_vec &amp;lt;- sapply(v, CLT)
normal_mix_vec &amp;lt;- sapply(v, normal_mix)
stit_vec &amp;lt;- sapply(v, stitch)

existing_list &amp;lt;- list(stitch = stit_vec,
                      normal_mix = normal_mix_vec)

# Compute our bounds
GLR_like_1_vec &amp;lt;- sapply(v, ours1$GLR_like_fn)
GLR_like_2_vec &amp;lt;- sapply(v, ours2$GLR_like_fn)
our_dis_mix_1_vec &amp;lt;- sapply(v, ours1$dis_mix_fn)
our_dis_mix_2_vec &amp;lt;- sapply(v, ours2$dis_mix_fn)


ours_list_1 &amp;lt;- list(GLR_like_1 = GLR_like_1_vec,
                    our_dis_mix_1 = our_dis_mix_1_vec)

ours_list_2 &amp;lt;- list(GLR_like_2 = GLR_like_2_vec,
                    our_dis_mix_2 = our_dis_mix_2_vec)

# Plot ratio of bounds
title &amp;lt;- &amp;quot;Ratio of CI&amp;#39;s width to CLT&amp;quot;
plot(v, chornoff_vec / CLT_vec, type = &amp;quot;l&amp;quot;,
     main = title,
     ylab = &amp;quot;Ratio&amp;quot;,
     xlab = &amp;quot;n&amp;quot;,
     ylim = c(1, 4),
     xlim = c(1, nmax))
col = 1
legend_col &amp;lt;- c(1)
for (i in seq_along(existing_list)){
  col &amp;lt;- col + 1
  legend_col &amp;lt;- c(legend_col, col)
  lines(v, existing_list[[i]] / CLT_vec, col = col)
}
legend_lty &amp;lt;- rep(1, length(existing_list) + 1)
for (i in seq_along(ours_list_1)){
  col &amp;lt;- col + 1
  legend_col &amp;lt;- c(legend_col, col)
  lines(v, ours_list_1[[i]] / CLT_vec,
        lty = 2, lwd = 2, col = col)
}
legend_lty &amp;lt;- c(legend_lty, rep(2, length(ours_list_1)))
for (i in seq_along(ours_list_2)){
  col &amp;lt;- col + 1
  legend_col &amp;lt;- c(legend_col, col)
  lines(v, ours_list_2[[i]] / CLT_vec,
        lty = 4, lwd = 2, col = col)
}
legend_lty &amp;lt;- c(legend_lty, rep(4, length(ours_list_2)))
abline(v = c(nmin1, nmin2, nmax1, nmax2), lty = 3)
bounds_name &amp;lt;- c(&amp;quot;Chernoff&amp;quot;, &amp;quot;Stitching (HRMS&amp;#39;20)&amp;quot;, &amp;quot;Normal Mix. (HRMS&amp;#39;20)&amp;quot;,
                 &amp;quot;GLR-like 1 (Ours)&amp;quot;, &amp;quot;Discrete Mix. 1 (Ours)&amp;quot;,
                 &amp;quot;GLR-like 2 (Ours)&amp;quot;, &amp;quot;Discrete Mix. 2 (Ours)&amp;quot;)
legend(&amp;quot;topright&amp;quot;, bounds_name,
       lty = legend_lty,
       col = legend_col,
       bg= &amp;quot;white&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://shinjaehyeok.github.io/post/2020-09-27-sglrt-package.en_files/figure-html/Fig.5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;efficiency-of-glr-like-and-discrete-mixture-tests&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. Efficiency of GLR-like and discrete mixture tests&lt;/h3&gt;
&lt;div id=&#34;table-i-vi-in-appendix-d&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;(Table I-VI in Appendix D)&lt;/h5&gt;
&lt;p&gt;The following Rcode reproduces Table I-VI in Appendix D in which we compared performances of sequential &lt;code&gt;GLR-like&lt;/code&gt; and &lt;code&gt;Discrete mixture&lt;/code&gt; tests to standard fixed sample size based tests for Gaussian and Bernoulli observations. In this document, we repeated the simulation only &lt;code&gt;100&lt;/code&gt; times to save the computation time but, in the paper, the simulation result based on &lt;code&gt;2000&lt;/code&gt; times repetition is presented.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Type 1 and Type 2 error control simulation
library(SGLRT)

# Define functions for tests based on a fixed sample size.

# Compute power of Z-test
G_pwr &amp;lt;- function(n, mu_target, mu_0, alpha){
  thres_exact &amp;lt;- qnorm(alpha, mu_0, sd = 1/sqrt(n), lower.tail = FALSE)
  pwr &amp;lt;- pnorm(thres_exact, mu_target, sd = 1/sqrt(n), lower.tail = FALSE)
  return(pwr)
}

# Z-test function (reject the null if the returned value is positive)
z_test &amp;lt;- function(x_bar, n, mu_0, alpha){
  z_alpha &amp;lt;- qnorm(1-alpha)
  x_bar - mu_0 - z_alpha / sqrt(n)
}

# Compute power of binomial test
binom_pwr &amp;lt;- function(n, mu_target, mu_0, alpha){
  n &amp;lt;- floor(n)
  thres_exact &amp;lt;- qbinom(alpha, n, mu_0, lower.tail = FALSE)
  pwr &amp;lt;- pbinom(thres_exact, n, mu_target, lower.tail = FALSE)
  return(pwr)
}

# Exact binomial test (reject the null if the returned value is positive)
binom_test &amp;lt;- function(x_bar, n, mu_0, alpha){
  thres_exact &amp;lt;- qbinom(alpha, n, mu_0, lower.tail = FALSE)
  return(x_bar * n - thres_exact)
}

# Sequential tests

# GLR-like and discrete mixture test for sub-Gaussian
seq_G_test_generator &amp;lt;- function(alpha, nmax, nmin){
  G_out &amp;lt;- SGLR_CI(alpha, nmax, nmin)
  return(G_out)
} 

# GLR-like and discrete mixture test for sub-Bernoulli
ber_fn_list &amp;lt;- generate_sub_ber_fn()
seq_ber_test_generator &amp;lt;- function(alpha, nmax, nmin){
  ber_out &amp;lt;- SGLR_CI(alpha,
                     nmax, 
                     nmin,
                     breg = ber_fn_list$breg,
                     breg_pos_inv = ber_fn_list$breg_pos_inv,
                     breg_neg_inv = ber_fn_list$breg_neg_inv,
                     breg_derv = ber_fn_list$breg_derv,
                     mu_lower = ber_fn_list$mu_lower,
                     mu_upper = ber_fn_list$mu_upper,
                     grid_by = ber_fn_list$grid_by)
  return(ber_out)
} 

# Sample generators
# Gaussian samples
G_sample &amp;lt;- function(n, mu_true){
  rnorm(n, mean = mu_true)
}

# Bernoulli samples
ber_sample &amp;lt;- function(n, mu_true){
  rbinom(n, 1, prob = mu_true)
}

# Function to summarize the simulation result
summ_simul &amp;lt;- function(result_name,
                       simul_out,
                       mu_true_vec){
  out &amp;lt;-   data.frame(mu_true = mu_true_vec, 
                      exact_hacking = numeric(length(mu_true_vec)),
                      GLR_like = numeric(length(mu_true_vec)),
                      dis_mix = numeric(length(mu_true_vec)),
                      exact_test = numeric(length(mu_true_vec)))
  for (i in seq_along(mu_true_vec)){
    out[i, -1] &amp;lt;- simul_out[[i]][[result_name]]
  }
  return(out)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gaussian-case&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3-1. Gaussian case&lt;/h4&gt;
&lt;p&gt;In the Gaussian setting, we compared sequential &lt;code&gt;GLL-like&lt;/code&gt; and &lt;code&gt;Discrete mixture&lt;/code&gt; tests to the &lt;code&gt;Z-test&lt;/code&gt;. We set the null hypothesis as the mean of the Gaussian distribution is less than or equal to &lt;code&gt;0&lt;/code&gt;, and the alternative hypothesis as the true mean is greater than &lt;code&gt;0.1&lt;/code&gt;. The &lt;code&gt;Z-test&lt;/code&gt; was performed based on a fixed sample size to make the test control both type-1 and type-2 errors by &lt;code&gt;0.1&lt;/code&gt;. In the following three tables, results of all three testing procedures are summarized. In the first table, we show that, for each underlying true mean, how frequently each testing procedure rejects the null hypothesis. Here the column &lt;code&gt;Z-test (p-hacking)&lt;/code&gt; represents the naive usage of &lt;code&gt;Z-test&lt;/code&gt; as a sequential procedure in which we stop and reject the null whenever p-value of the &lt;code&gt;Z-test&lt;/code&gt; goes below the level &lt;code&gt;0.1&lt;/code&gt;. This is an example of p-hacking which inflates the type-1 error significantly larger than the target level. From the first table, we can check that the &lt;code&gt;Z-test&lt;/code&gt; with continuous monitoring of p-values yields a large type 1 error (&lt;code&gt;0.43&lt;/code&gt;) even under a null distribution (&lt;code&gt;mean = -0.5&lt;/code&gt;) which is a way from the boundary of the null. In contrast, for all other testing procedures, type 1 errors are controlled under the null distributions.&lt;/p&gt;
&lt;p&gt;For alternative distributions (&lt;code&gt;mean &amp;gt; 0.1&lt;/code&gt;), the &lt;code&gt;Z-test&lt;/code&gt; has larger powers than the prespecified bound (&lt;code&gt;0.9&lt;/code&gt;) as expected. Note that the &lt;code&gt;discrete mixture&lt;/code&gt; based sequential test achieves almost the same power compared to the &lt;code&gt;Z-test&lt;/code&gt;. However, as we can check from the second and third tables, under the alternative distributions, the &lt;code&gt;discrete mixture&lt;/code&gt; test detects the signal faster than the &lt;code&gt;Z-test&lt;/code&gt; both on average and with high probability. The &lt;code&gt;GLR-like&lt;/code&gt; test yields a weaker power at the boundary of the alternative space but it achieves higher powers and smaller sample size as the underlying true means being farther away from the boundary.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;GLR-like&lt;/code&gt; and &lt;code&gt;discrete mixture&lt;/code&gt; tests do not always perform better than the &lt;code&gt;Z-test&lt;/code&gt;. If the underlying true mean lies between boundaries of null and alternative spaces, both test have weaker power and requires more samples to detect the signal compared to the &lt;code&gt;Z-test&lt;/code&gt;. Therefore, we recommend to set the boundary of the alternative conservatively in practice.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Gaussian simulation
set.seed(1)
f_simul &amp;lt;- function(mu) {
  out &amp;lt;- test_simul(mu_target = 0.1,
                    mu_true = mu,
                    mu_0 = 0,
                    alpha = 0.1,
                    beta = 0.1,
                    B = 100,
                    print_progress = FALSE,
                    print_result = FALSE,
                    sample_generator = G_sample,
                    power_fn = G_pwr,
                    fixed_test_fn = z_test,
                    seq_test_fn = seq_G_test_generator)
  return(out)
}

mu_true_vec &amp;lt;- seq(-0.05, 0.2, by = 0.05)
simul_G_out &amp;lt;- lapply(mu_true_vec, f_simul)

reject_rate_G &amp;lt;- summ_simul(&amp;quot;reject_rate&amp;quot;, 
                          simul_G_out,
                          mu_true_vec)
sample_size_G &amp;lt;- summ_simul(&amp;quot;sample_size&amp;quot;,
                          simul_G_out,
                          mu_true_vec)
early_stop_ratio_G &amp;lt;- summ_simul(&amp;quot;early_stop_ratio&amp;quot;,
                               simul_G_out,
                               mu_true_vec)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:52:56 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated probabilities of rejecting the null hypothesis. (Gaussian)
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
exact_hacking
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;th&gt;
exact_test
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
-0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.48
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.02
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.07
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.08
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.91
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.11
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.44
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.69
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.88
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.86
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.15
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.99
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.20
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:52:56 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated average sample sizes of testing procedures. (Gaussian)
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;th&gt;
exact_test
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
-0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1314.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1252.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1300.92
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1241.63
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1240.67
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
951.47
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
897.85
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
473.77
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.15
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
506.40
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
240.82
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.20
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
272.49
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
114.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
657.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:52:56 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated probabilities of tests being stopped earlier than Z-test.
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
-0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.05
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.06
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.05
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.06
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.33
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.30
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.71
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.15
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.71
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.96
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.20
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.97
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;bernoulli-case&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3-2. Bernoulli case&lt;/h4&gt;
&lt;p&gt;In the Bernoulli setting, we compared sequential &lt;code&gt;GLL-like&lt;/code&gt; and &lt;code&gt;Discrete mixture&lt;/code&gt; tests to the &lt;code&gt;exact binomial&lt;/code&gt; test. We set the null hypothesis as the mean of the Bernoulli distribution is less than or equal to &lt;code&gt;0.1&lt;/code&gt;, and the alternative hypothesis as the true mean is greater than &lt;code&gt;0.12&lt;/code&gt;. The &lt;code&gt;exact binomial&lt;/code&gt; test was performed based on a fixed sample size to make the test control both type-1 and type-2 errors by &lt;code&gt;0.1&lt;/code&gt;. The following three tables summarize the simulation result. In all three tables, we can check the same pattern we observed from the Gaussian case. In the first table, we show that, for each underlying true mean, how frequently each testing procedure rejects the null hypothesis. Here the column &lt;code&gt;Exact binomial (p-hacking)&lt;/code&gt; represents the naive usage of the exact test as a sequential procedure in which we stop and reject the null whenever p-value of the test goes below the level &lt;code&gt;0.1&lt;/code&gt;. As we observed before, the p-hacking inflates the type-1 error significantly larger than the target level. From the table, we can check that the &lt;code&gt;exact binomial test&lt;/code&gt; with continuous monitoring of p-values yields a large type 1 error (&lt;code&gt;0.23&lt;/code&gt;) even under a null distribution (&lt;code&gt;mean = 0.09&lt;/code&gt;) which is a way from the boundary of the null. In contrast, for all other testing procedures, type 1 errors are controlled under the null distributions.&lt;/p&gt;
&lt;p&gt;For alternative distributions (&lt;code&gt;mean &amp;gt; 0.12&lt;/code&gt;), the &lt;code&gt;exact binomial&lt;/code&gt; test has larger powers than the prespecified bound &lt;code&gt;0.9&lt;/code&gt; as expected. Again, as same as the Gaussian case, the &lt;code&gt;discrete mixture&lt;/code&gt; based sequential test achieves almost the same power compared to the &lt;code&gt;exact binomial&lt;/code&gt; test. However, as we can check from the second and third tables, under the alternative distributions, the &lt;code&gt;discrete mixture&lt;/code&gt; test uses, on average and with a high probability, smaller numbers of samples to detect the signal than the &lt;code&gt;exact binomial&lt;/code&gt; test with a fixed sample size. The &lt;code&gt;GLR-like&lt;/code&gt; test yields a weaker power at the boundary of the alternative space but it achieves higher powers and smaller sample size as the underlying true means being farther away from the boundary.&lt;/p&gt;
&lt;p&gt;However, as same as the Gaussian case, &lt;code&gt;GLR-like&lt;/code&gt; and &lt;code&gt;discrete mixture&lt;/code&gt; tests do not always perform better than the &lt;code&gt;exact binomial&lt;/code&gt; test. If the underlying true mean lies between boundaries of null and alternative spaces, both test have weaker power and requires more samples to detect the signal compared to the &lt;code&gt;exact binomial&lt;/code&gt;. Therefore, it is recommended to set the boundary of the alternative close to the boundary of the null in practice.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Bernoulli simulation
set.seed(1)
f_simul &amp;lt;- function(mu) {
  out &amp;lt;- test_simul(mu_target = 0.12,
                    mu_true = mu,
                    mu_0 = 0.1,
                    alpha = 0.1,
                    beta = 0.1,
                    B = 100,
                    print_progress = FALSE,
                    print_result = FALSE,
                    sample_generator = ber_sample,
                    power_fn = binom_pwr,
                    fixed_test_fn = binom_test,
                    seq_test_fn = seq_ber_test_generator)
  return(out)
}

mu_true_vec &amp;lt;- seq(0.09, 0.14, by = 0.01)
simul_ber_out &amp;lt;- lapply(mu_true_vec, f_simul)

reject_rate_ber &amp;lt;- summ_simul(&amp;quot;reject_rate&amp;quot;, 
                          simul_ber_out,
                          mu_true_vec)
sample_size_ber &amp;lt;- summ_simul(&amp;quot;sample_size&amp;quot;,
                          simul_ber_out,
                          mu_true_vec)
early_stop_ratio_ber &amp;lt;- summ_simul(&amp;quot;early_stop_ratio&amp;quot;,
                               simul_ber_out,
                               mu_true_vec)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:53:41 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated probabilities of rejecting the null hypothesis. (Bernoulli)
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
exact_hacking
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;th&gt;
exact_test
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.09
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.39
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.02
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.62
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.08
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.09
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.11
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.94
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.08
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.44
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.51
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.12
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.99
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.63
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.90
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.88
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.13
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.99
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.99
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:53:41 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated average sample sizes of testing procedures. (Bernoulli)
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;th&gt;
exact_test
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.09
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
3290.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
3257.57
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
3267.50
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
3065.64
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.11
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
3158.03
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
2299.34
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.12
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
2349.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1157.50
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.13
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1299.54
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
610.78
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
677.04
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
292.32
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1645.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt;
&lt;!-- Wed Jun  2 23:53:41 2021 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Estimated probabilities of tests being stopped earlier than the exact binomial test.
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
mu_true
&lt;/th&gt;
&lt;th&gt;
GLR_like
&lt;/th&gt;
&lt;th&gt;
dis_mix
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.09
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.10
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.01
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.07
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.11
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.04
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.34
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
4
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.12
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.24
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.73
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
5
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.13
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.72
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.94
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
6
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.98
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reference&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote1&#34;&gt;1&lt;/a&gt;: G. Lorden, “Open-ended tests for Koopman-Darmois families,”The Annals of Statistics, vol. 1, no. 4, pp. 633–643, 1973. &lt;sup&gt;&lt;a href=&#34;#myfootnote1_return&#34;&gt;return&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote2&#34;&gt;2&lt;/a&gt;: S. R. Howard, A. Ramdas, J. McAuliffe, and J. Sekhon, “Uniform, nonparametric, non-asymptotic confidence sequences,”arXiv preprint arXiv:1810.08240, 2018. &lt;sup&gt;&lt;a href=&#34;#myfootnote2_return&#34;&gt;return&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
